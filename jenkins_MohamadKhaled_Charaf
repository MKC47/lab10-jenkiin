pipeline {
    agent any
    environment {
        VIRTUAL_ENV = 'venv'
        PYTHON = "C:\\Users\\khale\\AppData\\Local\\Programs\\Python\\Python313\\python.exe"
        PYTHONIOENCODING = 'utf-8' // Ensures Python uses UTF-8 for I/O operations
    }
    stages {
        stage('Setup') {
            steps {
                script {
                    // Create virtual environment if it doesn't exist
                    if (!fileExists("${env.WORKSPACE}\\${VIRTUAL_ENV}")) {
                        bat "${env.PYTHON} -m venv ${VIRTUAL_ENV}"
                    }
                    // Activate virtual environment and install dependencies
                    bat "call .\\${VIRTUAL_ENV}\\Scripts\\activate && pip install -r requirements.txt"
                }
            }
        }
        stage('Lint') {
            steps {
                script {
                    // Run flake8 for linting
                    bat "call .\\${VIRTUAL_ENV}\\Scripts\\activate && flake8 app.py"
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    // Run pytest for unit testing
                    bat "call .\\${VIRTUAL_ENV}\\Scripts\\activate && pytest"
                }
            }
        }
        stage('Coverage') {
            steps {
                script {
                    // Run coverage analysis
                    bat "call .\\${VIRTUAL_ENV}\\Scripts\\activate && coverage run -m pytest && coverage report && coverage html"
                }
            }
        }
        stage('Security Scan') {
            steps {
                script {
                    // Run Bandit for security scanning only on app.py
                    def banditStatus = bat(
                        script: "chcp 65001 && call .\\${VIRTUAL_ENV}\\Scripts\\activate && bandit app.py -f json -o bandit_report.json",
                        returnStatus: true
                    )
                    
                    if (banditStatus != 0) {
                        echo "Bandit found security issues in app.py."
                        currentBuild.result = 'UNSTABLE'
                    } else {
                        echo "No security issues found by Bandit."
                    }
                }
            }
        }
        stage('Archive Reports') {
            steps {
                // Archive Coverage and Bandit reports
                archiveArtifacts artifacts: 'htmlcov/**, bandit_report.json', allowEmptyArchive: true
                publishHTML(target: [
                    allowMissing: true,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'htmlcov',
                    reportFiles: 'index.html',
                    reportName: 'Coverage Report'
                ])
            }
        }
        stage('Deploy') {
            when {
                expression { currentBuild.result != 'FAILURE' }
            }
            steps {
                script {
                    echo "Deploying application..."
                    // Local deployment setup
                    def deployDir = "C:\\deploy"
                    bat "if not exist ${deployDir} mkdir ${deployDir}"
                    bat "copy ${env.WORKSPACE}\\app.py ${deployDir}\\app.py"
                    // Run the deployed script
                    bat "call .\\${VIRTUAL_ENV}\\Scripts\\activate && python ${deployDir}\\app.py"
                }
            }
        }
    }
    post {
        always {
            // Cleanup workspace
            cleanWs()
        }
        unstable {
            echo 'Build marked as UNSTABLE due to security issues.'
        }
    }
}
